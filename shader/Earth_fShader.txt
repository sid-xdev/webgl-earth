precision lowp float;

uniform int uGlowState;
uniform int uLightState;

uniform float uDamageRadius;

uniform vec3 uSunPosition;
uniform vec3 uSunColor;
uniform vec3 uImpactPosition;
uniform vec3 uGlowColor;

uniform sampler2D uTexDiffusSampler;
uniform sampler2D uTexTransparentSampler;
uniform sampler2D uTexNormalSampler;
uniform sampler2D uTexSpecularSampler;
uniform sampler2D uTexDarkSampler;
uniform sampler2D uTexGlowSampler;
uniform sampler2D uTexBurnSampler;
uniform sampler2D uTexRuinSampler;

varying mat4 vCameraMat;
varying vec3 vVertexNorm; 
varying vec4 vVertexPos;
varying vec2 vVertexUV;  


vec4 bump( float multi ,sampler2D sampler, vec2 uv )
{
	vec2 size = vec2( 1.0/multi, 0.0 );
	
    vec4 center = texture2D( sampler, uv );
    float s11 = center.x;
    float s01 = texture2D( sampler, vec2( uv.x - 0.000244, uv.y ) ).x;
    float s21 = texture2D( sampler, vec2( uv.x + 0.000244, uv.y ) ).x;
    float s10 = texture2D( sampler, vec2( uv.x, uv.y - 0.000488 ) ).x;
    float s12 = texture2D( sampler, vec2( uv.x, uv.y + 0.000488 ) ).x;
    vec3 va = normalize( vec3( size.xy, s21 - s01 ) );
    vec3 vb = normalize( vec3( size.yx, s12 - s10 ) );
    return vec4( cross( va, vb ), s11 );
}

void main()
{
	if( uGlowState == 1 )
	{
		gl_FragColor = texture2D( uTexGlowSampler, vVertexUV );
		return;
	}
	
	float rad = 34.8175;
	vec3 diffus;
	vec3 night;
	vec3 ambColor = uSunColor*0.01;
	vec3 sunColor = uSunColor - ambColor;
	vec3 normal = normalize( vVertexNorm + bump( 1.0 ,uTexNormalSampler, mod( vVertexUV, 1.0 ) ).rgb );
	vec3 lightpos = vec3( vCameraMat * vec4( uSunPosition + rad*normal, 1.0 ) );
	vec3 lightDirection = normalize( lightpos - vec3( vVertexPos ) );
	vec3 eyeDirection = normalize( -vVertexPos.xyz );
	vec3 reflDirection = reflect( -lightDirection, normal );
	vec4 impact = vCameraMat * vec4( uImpactPosition, 1.0 );
	float dist = distance( vVertexPos, impact );
	
	if( dist < ( uDamageRadius - 0.05 ) )
	{
		diffus = ( ambColor + sunColor * max( dot( normal, lightDirection ), 0.0 ) ) * texture2D( uTexNormalSampler, vVertexUV ).rgb;
		night = vec3( 0, 0, 0 );
	}
	else
	{
		if( dist < ( uDamageRadius + 0.05 ) )
		{
			diffus = ( ambColor + sunColor * max( dot( normal, lightDirection ), 0.0 ) ) * texture2D( uTexTransparentSampler, vVertexUV ).rgb;
			night = vec3( 0, 0, 0 );
		}
		else
		{
			diffus = ( ambColor + sunColor * max( dot( normal, lightDirection ), 0.0 ) ) * texture2D( uTexDiffusSampler, vVertexUV ).rgb;
			night = 10.0 * max( 0.15 - max( dot( vVertexNorm, lightDirection ), 0.0 ), 0.0 ) * texture2D( uTexDarkSampler, vVertexUV ).rgb;
		}
	}
	
	vec3 spec = ( sunColor + ambColor ) * pow( max( dot( eyeDirection, reflDirection ), 0.0 ), 200.0 ) * texture2D( uTexSpecularSampler, vVertexUV ).rgb;
	vec3 transp = vec3( texture2D( uTexTransparentSampler, vVertexUV ) );
	
	float alpha = ( transp.r + transp.g + transp.b )/3.0;
	
	texture2D( uTexGlowSampler, vVertexUV );
	
	gl_FragColor = vec4( diffus + spec + night, alpha );
}