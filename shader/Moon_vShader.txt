#version 300 es

uniform mat4 perspectiv_matrix;
uniform mat4 camera_matrix; 
uniform mat4 world_position_matrix;

uniform vec3 light_direction;

layout(location = 0) in vec3 in_vertex; 
layout(location = 1) in vec3 in_normal;
layout(location = 2) in vec3 in_tangent;
layout(location = 3) in vec2 in_uv;

out vec2 uv;

out vec3 tangent_light_direction;

void main() 
{ 
	vec3 T = normalize(vec3(world_position_matrix * vec4(in_tangent, 0.0)));
	vec3 N = normalize(vec3(world_position_matrix * vec4(in_normal, 0.0)));
	T = normalize(T - dot(T, N) * N);
	vec3 B = cross(N, T);
	mat3 TBN = transpose( mat3(T, B, N) );  
	
	vec3 world_position = ( world_position_matrix * vec4( in_vertex, 1.0F ) ).xyz;
	
	tangent_light_direction = TBN * light_direction;
	
	uv = in_uv; 
	
	gl_Position = perspectiv_matrix * inverse(camera_matrix) * vec4( world_position, 1.0 );
}