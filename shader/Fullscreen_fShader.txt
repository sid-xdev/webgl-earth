#version 300 es

precision mediump float;

in vec2 uv;  

out vec4 fragment_color;

uniform sampler2D screen_sampler;

const float[25] weights = float[](
	0.003765,	0.015019,	0.023792,	0.015019,	0.003765,
	0.015019,	0.059912,	0.094907,	0.059912,	0.015019,
	0.023792,	0.094907,	0.150342,	0.094907,	0.023792,
	0.015019,	0.059912,	0.094907,	0.059912,	0.015019,
	0.003765,	0.015019,	0.023792,	0.015019,	0.003765 );
	
const vec2[25] directions = vec2[](
	vec2(-2.0,2.0),		vec2(-1.0,2.0),		vec2(0.0,2.0),	vec2(1.0,2.0),	vec2(2.0,2.0),
	vec2(-2.0,1.0),		vec2(-1.0,1.0),		vec2(0.0,1.0),	vec2(1.0,1.0),	vec2(2.0,1.0),
	vec2(-2.0,0.0),		vec2(-1.0,0.0),		vec2(0.0,0.0),	vec2(1.0,0.0),	vec2(2.0,0.0),
	vec2(-2.0,-1.0),	vec2(-1.0,-1.0),	vec2(0.0,-1.0),	vec2(1.0,-1.0),	vec2(2.0,-1.0),
	vec2(-2.0,-2.0),	vec2(-1.0,-2.0),	vec2(0.0,-2.0),	vec2(1.0,-2.0),	vec2(2.0,-2.0) );

void main()
{		
	vec2 tex_offset = 1.0 / vec2( textureSize( screen_sampler , 0) );
	
	vec3 color = vec3( 0.0 );
	float alpha = 0.0;
	
	for( uint i = 0U; i < 25U; ++i )
	{
		vec4 texel = texture( screen_sampler, tex_offset * directions[i] + uv );
		color += weights[i] * texel.xyz;
	}
	
	fragment_color = vec4( color ,1.0);//+ texture( screen_sampler, uv ).xyz, 1.0 );
}